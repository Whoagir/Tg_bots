import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
path_english_dict = "D://_teach//_obsidian//Riman//English dict.md"

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
def load_words(file_path):
    words = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            if '-' in line:
                parts = line.strip().split(' - ')
                english = parts[0].split(', ')
                russian = parts[1].split(', ')
                words.append((english, russian))
    return words


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
words = load_words(path_english_dict)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_stats[user_id] = {"total": 0, "correct": 0, "mode": None, "in_training": False}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚û°Ô∏è –†—É—Å—Å–∫–∏–π", callback_data="en_ru")],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π ‚û°Ô∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="ru_en")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    mode = query.data

    if mode == "en_ru":
        user_stats[user_id]["mode"] = 1
        await query.edit_message_text("–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚û°Ô∏è –†—É—Å—Å–∫–∏–π")
    elif mode == "ru_en":
        user_stats[user_id]["mode"] = 2
        await query.edit_message_text("–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –†—É—Å—Å–∫–∏–π ‚û°Ô∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π")

    # –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    user_stats[user_id]["in_training"] = True
    await start_training(update, context)


# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_stats[user_id]["in_training"] = False
    stats = user_stats[user_id]
    await update.message.reply_text(
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n–í–µ—Ä–Ω–æ —Ä–µ—à–µ–Ω–æ: {stats['correct']} –∏–∑ {stats['total']} –≤–æ–ø—Ä–æ—Å–æ–≤."
    )


# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = user_stats.get(user_id, {"total": 0, "correct": 0})

    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total']}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {round((stats['correct'] / stats['total']) * 100, 2) if stats['total'] > 0 else 0}%."
    )


# –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def start_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    if not user_stats[user_id]["in_training"]:
        return

    mode = user_stats[user_id]["mode"]

    random_entry = random.choice(words)
    if mode == 1:  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        word = random.choice(random_entry[0])
        correct_answer = random.choice(random_entry[1])
        options = random.sample([w for _, trans in words for w in trans], 3) + [correct_answer]
    elif mode == 2:  # –†—É—Å—Å–∫–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        word = random.choice(random_entry[1])
        correct_answer = random.choice(random_entry[0])
        options = random.sample([w for trans, _ in words for w in trans], 3) + [correct_answer]

    random.shuffle(options)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

    context.user_data["current_question"] = {"word": word, "correct": correct_answer}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        f"–ü–µ—Ä–µ–≤–µ–¥–∏: *{word}*",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?
    if not user_stats[user_id]["in_training"]:
        return

    user_stats[user_id]["total"] += 1
    current_question = context.user_data.get("current_question", {})
    correct_answer = current_question.get("correct", None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if query.data == correct_answer:
        user_stats[user_id]["correct"] += 1
        await query.edit_message_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    else:
        await query.edit_message_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await start_training(update, context)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token("7936087407:AAGJVQlJe8LHgrFUxNQTOqG9QRGHGdAhhzE").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("stats", stats))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(select_mode, pattern="^(en_ru|ru_en)$"))
    app.add_handler(CallbackQueryHandler(handle_answer))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()
